import multiprocessing
import socketio
import numpy as np
import matplotlib as mpl
from PyQt5 import QtCore, QtWidgets, QtGui, QtChart

from . import news, fxrate
from .utils import interface
from . import prediction


GREEN = np.array([0, 128, 0])
WHITE = np.array([255, 255, 255])
RED = np.array([255, 0, 0])
def getColor(mix: float):
    """Helper function to get background of a sentiment value
    """
    if mix > 0:
        color = GREEN * mix + (1-mix) * WHITE
    else:
        mix = -mix
        color = RED * mix + (1-mix) * WHITE
    color.astype(int, copy=False)
    return color[0], color[1], color[2]


class Worker(QtCore.QThread):
    """Update information thread
    """
    signal_rate = QtCore.pyqtSignal(str, str)
    signal_news = QtCore.pyqtSignal(str, float)

    def __init__(self, parent=None):
        super().__init__(parent=parent)
        self.queue = multiprocessing.Queue()
        self.process_news = news.NewsProcess(self.queue, daemon=True)
        self.process_rates = fxrate.FxRateCrawler(self.queue, daemon=True)
        self.process_news.start()
        self.process_rates.start()

    def run(self):
        while True:
            item = self.queue.get()
            if isinstance(item, interface.FxRate):
                # FxRate data processing
                self.signal_rate.emit(item.currencyPair, item.offerBig + item.offerPips)
            elif isinstance(item, interface.News):
                # News data processing
                self.signal_news.emit(item.title, item.sentiment)


class Ui_MainWindow(object):

    def update_rates(self, pair: str, price: str):
        getattr(self, pair[:3]+pair[4:]).setText('\t'.join((pair, price)))
    
    def update_news(self, news_title: str, sentiment: float):
        item = QtWidgets.QListWidgetItem(news_title)
        item.setBackground(QtGui.QColor(*getColor(sentiment)))
        self.listNews.addItem(item)
        self.listNews.scrollToBottom()
    
    def init_chart(self, chartview, pair: str):
        series = QtChart.QLineSeries()
        pres = prediction.pairPredict(pair)
        # pres = [10] * 10
        data = [QtCore.QPointF(x[0], x[1]) for x in enumerate(pres)]
        series.append(data)
        ax_x = QtChart.QValueAxis()
        ax_x.setRange(0.0, 10.0)
        chartview.chart().addSeries(series)
        chartview.chart().legend().hide()
        chartview.setContentsMargins(-10, -10, -10, -10)
        chartview.chart().setAxisX(ax_x)
        # chartview.chart().setAxisY(ax_y)
        chartview.show()
    
    def setupUi(self, MainWindow):
        """ The following code is initially generated by Qt Designer to init the window
            Some modifications have been done
        """
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1920, 1080)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setContextMenuPolicy(QtCore.Qt.DefaultContextMenu)
        MainWindow.setStatusTip("")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.centralwidget.sizePolicy().hasHeightForWidth())
        self.centralwidget.setSizePolicy(sizePolicy)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.listNews = QtWidgets.QListWidget(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.listNews.sizePolicy().hasHeightForWidth())
        self.listNews.setSizePolicy(sizePolicy)
        self.listNews.setProperty("showDropIndicator", False)
        self.listNews.setObjectName("listNews")
        self.gridLayout_2.addWidget(self.listNews, 0, 1, 1, 1)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.EURUSD = QtWidgets.QLabel(self.centralwidget)
        self.EURUSD.setObjectName("EURUSD")
        self.horizontalLayout_2.addWidget(self.EURUSD)
        self.chartView = QtChart.QChartView(self.centralwidget)
        self.chartView.setObjectName("chartView")
        self.horizontalLayout_2.addWidget(self.chartView)
        self.init_chart(self.chartView, "EUR/USD")

        self.verticalLayout.addLayout(self.horizontalLayout_2)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.USDJPY = QtWidgets.QLabel(self.centralwidget)
        self.USDJPY.setObjectName("USDJPY")
        self.horizontalLayout_3.addWidget(self.USDJPY)
        self.chartView_2 = QtChart.QChartView(self.centralwidget)
        self.chartView_2.setObjectName("chartView_2")
        self.horizontalLayout_3.addWidget(self.chartView_2)
        self.init_chart(self.chartView_2, "USD/JPY")

        self.verticalLayout.addLayout(self.horizontalLayout_3)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.GBPUSD = QtWidgets.QLabel(self.centralwidget)
        self.GBPUSD.setObjectName("GBPUSD")
        self.horizontalLayout_4.addWidget(self.GBPUSD)
        self.chartView_3 = QtChart.QChartView(self.centralwidget)
        self.chartView_3.setObjectName("chartView_3")
        self.horizontalLayout_4.addWidget(self.chartView_3)
        self.init_chart(self.chartView_3, "GBP/USD")

        self.verticalLayout.addLayout(self.horizontalLayout_4)
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.EURGBP = QtWidgets.QLabel(self.centralwidget)
        self.EURGBP.setObjectName("EURGBP")
        self.horizontalLayout_5.addWidget(self.EURGBP)
        self.chartView_4 = QtChart.QChartView(self.centralwidget)
        self.chartView_4.setObjectName("chartView_4")
        self.horizontalLayout_5.addWidget(self.chartView_4)
        self.init_chart(self.chartView_4, "EUR/GBP")

        self.verticalLayout.addLayout(self.horizontalLayout_5)
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.USDCHF = QtWidgets.QLabel(self.centralwidget)
        self.USDCHF.setObjectName("USDCHF")
        self.horizontalLayout_6.addWidget(self.USDCHF)
        self.chartView_5 = QtChart.QChartView(self.centralwidget)
        self.chartView_5.setObjectName("chartView_5")
        self.horizontalLayout_6.addWidget(self.chartView_5)
        self.init_chart(self.chartView_5, "USD/CHF")

        self.verticalLayout.addLayout(self.horizontalLayout_6)
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.EURJPY = QtWidgets.QLabel(self.centralwidget)
        self.EURJPY.setObjectName("EURJPY")
        self.horizontalLayout_7.addWidget(self.EURJPY)
        self.chartView_6 = QtChart.QChartView(self.centralwidget)
        self.chartView_6.setObjectName("chartView_6")
        self.horizontalLayout_7.addWidget(self.chartView_6)
        self.init_chart(self.chartView_6, "EUR/JPY")

        self.verticalLayout.addLayout(self.horizontalLayout_7)
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.EURCHF = QtWidgets.QLabel(self.centralwidget)
        self.EURCHF.setObjectName("EURCHF")
        self.horizontalLayout_8.addWidget(self.EURCHF)
        self.chartView_7 = QtChart.QChartView(self.centralwidget)
        self.chartView_7.setObjectName("chartView_7")
        self.horizontalLayout_8.addWidget(self.chartView_7)
        self.init_chart(self.chartView_7, "EUR/CHF")

        self.verticalLayout.addLayout(self.horizontalLayout_8)
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.USDCAD = QtWidgets.QLabel(self.centralwidget)
        self.USDCAD.setObjectName("USDCAD")
        self.horizontalLayout_9.addWidget(self.USDCAD)
        self.chartView_8 = QtChart.QChartView(self.centralwidget)
        self.chartView_8.setObjectName("chartView_8")
        self.horizontalLayout_9.addWidget(self.chartView_8)
        self.init_chart(self.chartView_8, "USD/CAD")

        self.verticalLayout.addLayout(self.horizontalLayout_9)
        self.horizontalLayout_10 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_10.setObjectName("horizontalLayout_10")
        self.AUDUSD = QtWidgets.QLabel(self.centralwidget)
        self.AUDUSD.setObjectName("AUDUSD")
        self.horizontalLayout_10.addWidget(self.AUDUSD)
        self.chartView_9 = QtChart.QChartView(self.centralwidget)
        self.chartView_9.setObjectName("chartView_9")
        self.horizontalLayout_10.addWidget(self.chartView_9)
        self.init_chart(self.chartView_9, "AUD/USD")

        self.verticalLayout.addLayout(self.horizontalLayout_10)
        self.horizontalLayout_11 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_11.setObjectName("horizontalLayout_11")
        self.GBPJPY = QtWidgets.QLabel(self.centralwidget)
        self.GBPJPY.setObjectName("GBPJPY")
        self.horizontalLayout_11.addWidget(self.GBPJPY)
        self.chartView_10 = QtChart.QChartView(self.centralwidget)
        self.chartView_10.setObjectName("chartView_10")
        self.horizontalLayout_11.addWidget(self.chartView_10)
        self.init_chart(self.chartView_10, "GBP/JPY")

        self.verticalLayout.addLayout(self.horizontalLayout_11)
        self.gridLayout_2.addLayout(self.verticalLayout, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.worker = Worker()
        self.worker.signal_rate.connect(self.update_rates)
        self.worker.signal_news.connect(self.update_news)
        self.worker.start()


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Forexer"))
        self.EURUSD.setText(_translate("MainWindow", "Waiting..."))
        self.USDJPY.setText(_translate("MainWindow", "Waiting..."))
        self.GBPUSD.setText(_translate("MainWindow", "Waiting..."))
        self.EURGBP.setText(_translate("MainWindow", "Waiting..."))
        self.USDCHF.setText(_translate("MainWindow", "Waiting..."))
        self.EURJPY.setText(_translate("MainWindow", "Waiting..."))
        self.EURCHF.setText(_translate("MainWindow", "Waiting..."))
        self.USDCAD.setText(_translate("MainWindow", "Waiting..."))
        self.AUDUSD.setText(_translate("MainWindow", "Waiting..."))
        self.GBPJPY.setText(_translate("MainWindow", "Waiting..."))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
